plugins {
    id 'java'
    id 'maven-publish'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id 'com.gradleup.shadow' version '8.3.5'
}

group = 'gay.bunnie'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }

    maven { url 'https://jitpack.io' }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.8-R0.1-SNAPSHOT")
    compileOnly("com.github.MilkBowl:VaultAPI:1.7") {
        exclude group: "org.bukkit", module: "bukkit"
    }
    implementation("org.xerial:sqlite-jdbc:3.43.2.0")
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21")
    }
    
    shadowJar {
        archiveBaseName.set('ArmorHistory')
        archiveClassifier.set('')
        archiveVersion.set(project.version.toString())
        
        // Relocate dependencies to avoid conflicts
        relocate 'org.sqlite', 'gay.bunnie.armorhistory.libs.sqlite'

        dependencies {
            exclude(dependency('io.papermc.paper:.*'))
            exclude(dependency('com.github.MilkBowl:.*'))
        }

        exclude 'org/sqlite/native/**'
        exclude '**/native/**'
        exclude '**/*.so'
        exclude '**/*.dll'
        exclude '**/*.dylib'
        exclude '**/*.jnilib'

        minimize()
    }

    build {
        dependsOn shadowJar
    }
}

tasks.register('printVersion') {
    doLast {
        println project.version
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            pom {
                name = 'ArmorHistory'
                description = 'A Minecraft plugin for tracking item ownership history'
                url = 'https://github.com/BrentanRath/ArmorHistory'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id = 'bunnie'
                        name = 'Bunnie'
                        email = 'your.email@example.com'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/BrentanRath/ArmorHistory.git'
                    developerConnection = 'scm:git:ssh://github.com:BrentanRath/ArmorHistory.git'
                    url = 'https://github.com/BrentanRath/ArmorHistory'
                }
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/BrentanRath/ArmorHistory")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
}
