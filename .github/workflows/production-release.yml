name: Production Release

on:
  push:
    branches: [production]
  pull_request:
    branches: [production]
    types: [closed]

jobs:
  build-and-release:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle (create shadow JAR)
        run: ./gradlew shadowJar

      - name: List build artifacts
        run: |
          echo "Contents of build/libs:"
          ls -la build/libs/ || echo "build/libs directory not found"

      - name: Get version from gradle
        id: get_version
        run: |
          VERSION=$(./gradlew -q printVersion | tail -n1)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION: $VERSION"

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Find JAR file
        id: find_jar
        run: |
          JAR_FILE=$(find build/libs -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -n1)
          if [ -z "$JAR_FILE" ]; then
            echo "No JAR file found in build/libs"
            exit 1
          fi
          echo "jar_file=$JAR_FILE" >> $GITHUB_OUTPUT
          echo "jar_name=$(basename $JAR_FILE)" >> $GITHUB_OUTPUT
          echo "Found JAR: $JAR_FILE"

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}-${{ steps.date.outputs.date }}
          name: ArmorHistory v${{ steps.get_version.outputs.version }} (${{ steps.date.outputs.date }})
          body: |
            Automated release from production branch.
            
            ## Changes
            - Built from commit: ${{ github.sha }}
            - Version: ${{ steps.get_version.outputs.version }}
            - Build date: ${{ steps.date.outputs.date }}
            
            ## Installation
            Download the JAR file below and place it in your server's `plugins/` folder.
          files: ${{ steps.find_jar.outputs.jar_file }}
          draft: false
          prerelease: false